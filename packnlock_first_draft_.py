# -*- coding: utf-8 -*-
"""packnlock first draft .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k5qbAfubezEQkwzUdpXgrkzEQ7wLOWef
"""

!pip install tensorflow

!pip install opencv-python

!pip install keras

#Imprting the text file and taking each characters ASCII values in a list


def text_to_binary_array(file_path):
    binary_array = []
    with open(file_path, 'r') as file:
        text_content = file.read()
        for char in text_content:
            # Convert each character to binary representation and append to the array
            binary_array.append(format(ord(char)))

    return binary_array

# taking the text file path
file_path = '/content/test.txt'

binary_array = text_to_binary_array(file_path)
binary_array
print(binary_array)
print(len(binary_array))

#using the python pillow library to generate a grayscale or "L" mode image

from PIL import Image

def binary_array_to_image(binary_array, width, height):
    # Create a new image with L mode (grayscale) and specified width and height
    img = Image.new('L', (width, height))

    # Convert the binary array to a flat list of integer values (0 or 255)
    pixels = [int(b)  for b in binary_array]


    # Set the pixel values of the image
    img.putdata(pixels)

    return img

#Using the funtion
binary_array #  binary array
width = 60   # Width of the image
height = 60  # Height of the image

# Convert binary array to image
img = binary_array_to_image(binary_array, width, height)

# Save or display the image
img.save('grayscale_image.png')  # Save the image
img.show()  # Display the image
#Sometime the show() function does not work so printing it again
img

#Taking the list "binary_array" to create a 2D numpy array of 3 elements to treat those 3 values as RGB values

import numpy as np
def text_to_binary_array(file_path):
    binary_array = []
    with open(file_path, 'r') as file:
        text_content = file.read()
        for char in text_content:
            # Convert each character to binary representation and append to the array
            binary_array.append(format(ord(char)))
    return binary_array



def convert_to_2d_array(arr):
    # Reshape the 1D array into a 2D array with shape (-1,3)
    # becuase we don't the know how many rows would be needed that why -1 is used that way rows will be assigned automatically
    return np.reshape(arr, (-1,3))

    # Using the text file to generate a RGB image
file_path = '/content/base64_output.txt'

binary_array = text_to_binary_array(file_path)
binary_array
print(binary_array)





#  1D array
one_d_array = np.array(binary_array)

# Convert to 2D array
two_d_array = convert_to_2d_array(one_d_array)
print(two_d_array)
print(len(two_d_array))

#taking the 2D array and forming a RGB image

from PIL import Image
import numpy as np

def binary_array_to_image(binary_array, width, height):
    # Create a new image with RGB mode and specified width and height
    img = Image.new('RGB', (width, height))



    # Convert the binary array to a flat list of tuples containing RGB values
    pixels = [(int(r), int(g), int(b)) for r, g, b in binary_array]

    # Set the pixel values of the image
    img.putdata(pixels)

    return img

#Assigning array and hieght and width

binary_array = two_d_array
width = 312  # Width of the image
height = 312  # Height of the image


# Convert RGB array to image
img = binary_array_to_image(two_d_array, width, height)

# Save or display the image
img.save('rgb_image.png')  # Save the image
img.show()  # Display the image

img

#retriving the image to its array values that is was created with

import numpy as np

numpydata=np.asarray(img)
numpydata
# Example 3D array
three_d_array = numpydata

# Convert 3D array to 1D array using flatten()
one_d_array = three_d_array.flatten()

print(one_d_array)

# Yeilding the character values from the ASCII value array
ascii_values =one_d_array

# Convert ASCII values to characters
characters = [chr(val) for val in ascii_values]

print(characters)

#Taking the characters to again form the text file that we started with to again get the file that was converted to IMAGE

# Example list of characters
characters_list = characters

# Convert list of characters to a string
text_string = ''.join(characters_list)

# Specify the file path with .txt extension
file_path = 'output.txt'

# Write the string to a text file
with open(file_path, 'w') as file:
    file.write(text_string)

print(f"Text has been saved to {file_path}")